/*
 * This file is generated by jOOQ.
 */
package ig.ds.data.jooq.tables;


import ig.ds.data.jooq.Attachments;
import ig.ds.data.jooq.Keys;
import ig.ds.data.jooq.tables.records.AttachmentRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Attachment extends TableImpl<AttachmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>attachments.attachment</code>
     */
    public static final Attachment ATTACHMENT = new Attachment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AttachmentRecord> getRecordType() {
        return AttachmentRecord.class;
    }

    /**
     * The column <code>attachments.attachment.attachment_id</code>.
     */
    public final TableField<AttachmentRecord, String> ATTACHMENT_ID = createField(DSL.name("attachment_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>attachments.attachment.object_id</code>.
     */
    public final TableField<AttachmentRecord, String> OBJECT_ID = createField(DSL.name("object_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>attachments.attachment.region_id</code>.
     */
    public final TableField<AttachmentRecord, String> REGION_ID = createField(DSL.name("region_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>attachments.attachment.created_at</code>.
     */
    public final TableField<AttachmentRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>attachments.attachment.deleted_at</code>.
     */
    public final TableField<AttachmentRecord, OffsetDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>attachments.attachment.created_by</code>.
     */
    public final TableField<AttachmentRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>attachments.attachment.deleted_by</code>.
     */
    public final TableField<AttachmentRecord, String> DELETED_BY = createField(DSL.name("deleted_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>attachments.attachment.file_id</code>.
     */
    public final TableField<AttachmentRecord, String> FILE_ID = createField(DSL.name("file_id"), SQLDataType.CLOB, this, "");

    private Attachment(Name alias, Table<AttachmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Attachment(Name alias, Table<AttachmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>attachments.attachment</code> table reference
     */
    public Attachment(String alias) {
        this(DSL.name(alias), ATTACHMENT);
    }

    /**
     * Create an aliased <code>attachments.attachment</code> table reference
     */
    public Attachment(Name alias) {
        this(alias, ATTACHMENT);
    }

    /**
     * Create a <code>attachments.attachment</code> table reference
     */
    public Attachment() {
        this(DSL.name("attachment"), null);
    }

    public <O extends Record> Attachment(Table<O> child, ForeignKey<O, AttachmentRecord> key) {
        super(child, key, ATTACHMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Attachments.ATTACHMENTS;
    }

    @Override
    public UniqueKey<AttachmentRecord> getPrimaryKey() {
        return Keys.ATTACHMENT_PKEY;
    }

    @Override
    public List<ForeignKey<AttachmentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ATTACHMENT__ATTACHMENT_FILE_ID_FKEY);
    }

    private transient File _file;

    /**
     * Get the implicit join path to the <code>attachments.file</code> table.
     */
    public File file() {
        if (_file == null)
            _file = new File(this, Keys.ATTACHMENT__ATTACHMENT_FILE_ID_FKEY);

        return _file;
    }

    @Override
    public Attachment as(String alias) {
        return new Attachment(DSL.name(alias), this);
    }

    @Override
    public Attachment as(Name alias) {
        return new Attachment(alias, this);
    }

    @Override
    public Attachment as(Table<?> alias) {
        return new Attachment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Attachment rename(String name) {
        return new Attachment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Attachment rename(Name name) {
        return new Attachment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Attachment rename(Table<?> name) {
        return new Attachment(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, OffsetDateTime, OffsetDateTime, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super String, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super String, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
