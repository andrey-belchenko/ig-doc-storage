/*
 * This file is generated by jOOQ.
 */
package ig.ds.data.jooq.tables;


import ig.ds.data.jooq.Attachments;
import ig.ds.data.jooq.Keys;
import ig.ds.data.jooq.tables.records.SignatureRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Signature extends TableImpl<SignatureRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>attachments.signature</code>
     */
    public static final Signature SIGNATURE = new Signature();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SignatureRecord> getRecordType() {
        return SignatureRecord.class;
    }

    /**
     * The column <code>attachments.signature.id</code>.
     */
    public final TableField<SignatureRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>attachments.signature.signer_name</code>.
     */
    public final TableField<SignatureRecord, String> SIGNER_NAME = createField(DSL.name("signer_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>attachments.signature.signed_at</code>.
     */
    public final TableField<SignatureRecord, LocalDateTime> SIGNED_AT = createField(DSL.name("signed_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>attachments.signature.attachment_id</code>.
     */
    public final TableField<SignatureRecord, Integer> ATTACHMENT_ID = createField(DSL.name("attachment_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Signature(Name alias, Table<SignatureRecord> aliased) {
        this(alias, aliased, null);
    }

    private Signature(Name alias, Table<SignatureRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>attachments.signature</code> table reference
     */
    public Signature(String alias) {
        this(DSL.name(alias), SIGNATURE);
    }

    /**
     * Create an aliased <code>attachments.signature</code> table reference
     */
    public Signature(Name alias) {
        this(alias, SIGNATURE);
    }

    /**
     * Create a <code>attachments.signature</code> table reference
     */
    public Signature() {
        this(DSL.name("signature"), null);
    }

    public <O extends Record> Signature(Table<O> child, ForeignKey<O, SignatureRecord> key) {
        super(child, key, SIGNATURE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Attachments.ATTACHMENTS;
    }

    @Override
    public Identity<SignatureRecord, Integer> getIdentity() {
        return (Identity<SignatureRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SignatureRecord> getPrimaryKey() {
        return Keys.SIGNATURE_PKEY;
    }

    @Override
    public List<ForeignKey<SignatureRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SIGNATURE__SIGNATURE_ATTACHMENT_ID_FKEY);
    }

    private transient Attachment _attachment;

    /**
     * Get the implicit join path to the <code>attachments.attachment</code>
     * table.
     */
    public Attachment attachment() {
        if (_attachment == null)
            _attachment = new Attachment(this, Keys.SIGNATURE__SIGNATURE_ATTACHMENT_ID_FKEY);

        return _attachment;
    }

    @Override
    public Signature as(String alias) {
        return new Signature(DSL.name(alias), this);
    }

    @Override
    public Signature as(Name alias) {
        return new Signature(alias, this);
    }

    @Override
    public Signature as(Table<?> alias) {
        return new Signature(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Signature rename(String name) {
        return new Signature(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Signature rename(Name name) {
        return new Signature(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Signature rename(Table<?> name) {
        return new Signature(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, LocalDateTime, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
