/*
 * This file is generated by jOOQ.
 */
package ig.ds.data.jooq.tables.records;


import ig.ds.data.jooq.tables.File;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FileRecord extends UpdatableRecordImpl<FileRecord> implements Record3<String, String, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>attachments.file.file_id</code>.
     */
    public void setFileId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>attachments.file.file_id</code>.
     */
    public String getFileId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>attachments.file.file_name</code>.
     */
    public void setFileName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>attachments.file.file_name</code>.
     */
    public String getFileName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>attachments.file.file_size</code>.
     */
    public void setFileSize(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>attachments.file.file_size</code>.
     */
    public Long getFileSize() {
        return (Long) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, Long> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return File.FILE.FILE_ID;
    }

    @Override
    public Field<String> field2() {
        return File.FILE.FILE_NAME;
    }

    @Override
    public Field<Long> field3() {
        return File.FILE.FILE_SIZE;
    }

    @Override
    public String component1() {
        return getFileId();
    }

    @Override
    public String component2() {
        return getFileName();
    }

    @Override
    public Long component3() {
        return getFileSize();
    }

    @Override
    public String value1() {
        return getFileId();
    }

    @Override
    public String value2() {
        return getFileName();
    }

    @Override
    public Long value3() {
        return getFileSize();
    }

    @Override
    public FileRecord value1(String value) {
        setFileId(value);
        return this;
    }

    @Override
    public FileRecord value2(String value) {
        setFileName(value);
        return this;
    }

    @Override
    public FileRecord value3(Long value) {
        setFileSize(value);
        return this;
    }

    @Override
    public FileRecord values(String value1, String value2, Long value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FileRecord
     */
    public FileRecord() {
        super(File.FILE);
    }

    /**
     * Create a detached, initialised FileRecord
     */
    public FileRecord(String fileId, String fileName, Long fileSize) {
        super(File.FILE);

        setFileId(fileId);
        setFileName(fileName);
        setFileSize(fileSize);
        resetChangedOnNotNull();
    }
}
