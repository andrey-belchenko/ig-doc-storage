/*
 * This file is generated by jOOQ.
 */
package ig.ds.data.jooq.tables;


import ig.ds.data.jooq.Attachments;
import ig.ds.data.jooq.Keys;
import ig.ds.data.jooq.tables.records.FileRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class File extends TableImpl<FileRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>attachments.file</code>
     */
    public static final File FILE = new File();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FileRecord> getRecordType() {
        return FileRecord.class;
    }

    /**
     * The column <code>attachments.file.file_id</code>.
     */
    public final TableField<FileRecord, String> FILE_ID = createField(DSL.name("file_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>attachments.file.file_name</code>.
     */
    public final TableField<FileRecord, String> FILE_NAME = createField(DSL.name("file_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>attachments.file.file_size</code>.
     */
    public final TableField<FileRecord, Long> FILE_SIZE = createField(DSL.name("file_size"), SQLDataType.BIGINT, this, "");

    private File(Name alias, Table<FileRecord> aliased) {
        this(alias, aliased, null);
    }

    private File(Name alias, Table<FileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>attachments.file</code> table reference
     */
    public File(String alias) {
        this(DSL.name(alias), FILE);
    }

    /**
     * Create an aliased <code>attachments.file</code> table reference
     */
    public File(Name alias) {
        this(alias, FILE);
    }

    /**
     * Create a <code>attachments.file</code> table reference
     */
    public File() {
        this(DSL.name("file"), null);
    }

    public <O extends Record> File(Table<O> child, ForeignKey<O, FileRecord> key) {
        super(child, key, FILE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Attachments.ATTACHMENTS;
    }

    @Override
    public UniqueKey<FileRecord> getPrimaryKey() {
        return Keys.FILE_PKEY;
    }

    @Override
    public File as(String alias) {
        return new File(DSL.name(alias), this);
    }

    @Override
    public File as(Name alias) {
        return new File(alias, this);
    }

    @Override
    public File as(Table<?> alias) {
        return new File(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public File rename(String name) {
        return new File(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public File rename(Name name) {
        return new File(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public File rename(Table<?> name) {
        return new File(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
